#!/bin/bash

set -e

supported_versions="1.4,2.0,3.0,4.0,5.0,6.0"
version="6.0"
arch="i386"
dest_dir=
image_name=
open=0
no_keep=0
repository=
config=
default_dir_prefix="pharo"
download_dest_dir=/tmp/pharo-images

print_usage() {
	echo "Usage: $0 [-v 1.4|2.0|3.0|4.0|5.0|6.0] [-X] [-d dir] [-n name] [-i issue] [-k] [-o]"
	echo ""
	echo " -v 	Version number to download. Default is 6.0"
	echo " -X 	Download 64bits version (works with version 6.0+)"	
	echo " -d 	Destination directory of downloaded version. Default is pharo60"
	echo " -n 	Name of image. Default is the same name from -d option."
	echo " -i 	Equivallent to -d issueNUMBER"
	echo " -k	Kill any existing previous directory"
	echo " -o 	Open image after download."
	echo ""
	echo "Together with this instructions, $0 will search for file pharo_config in"
	echo "destination directory, and execute phconfig if he found it."
}

while getopts "okhXv:d:n:i:" option; do 
	case "$option" in
		v) version=$OPTARG ;;
		X) arch="x86_64" ;;
		o) open=1 ;;
		k) no_keep=1 ;;
		d) dest_dir=$OPTARG ;;
		n) image_name=$OPTARG ;;
        i) dest_dir="issue$OPTARG" ;;
		h) 
			print_usage
			exit 1
			;;
		\?)
      		echo "Invalid option: -$OPTARG" >&2
      		exit 1
      		;;
    	:)
      		echo "Option -$OPTARG requires an argument." >&2
      		exit 1
      		;; 
	esac
done

if [[ ! $supported_versions == *"$version"* ]]; then
	echo "Version $version not supported"
	exit 1
fi

flat_version="`echo $version | sed 's/\.//'`"
arch_suffix=
if [ "$arch" == "x86_64" ]; then
	arch_suffix="-64"
fi 

if [ -z "$dest_dir" ]; then
	dest_dir="$default_dir_prefix$flat_version$arch_suffix"
fi

if [ -z "$image_name" ]; then
	image_name=$dest_dir
fi 

# downloading 
keep_file_name="$download_dest_dir/Pharo-$version-$arch-last.zip"
pharo_name="Pharo"
file_name="latest$arch_suffix.zip"
sources_to_remove=
download_url="http://files.pharo.org/get-files/$flat_version/pharo$arch_suffix.zip"

if [ -e $keep_file_name ]; then
	rm $keep_file_name
fi
wget -O $keep_file_name --tries=1 --no-check-certificate $download_url

# Backup dir if exists
if [ -d $dest_dir ]; then
	if [ $no_keep == 1 ]; then
		if [ -d ~$dest_dir ]; then 
			rm -Rf ~$dest_dir		
		fi
		mv $dest_dir $dest_dir~
	else
		if [ -e $dest_dir/$image_name.image ]; then 
			mv $dest_dir/$image_name.image $dest_dir/$image_name.image~
		fi
		if [ -e $dest_dir/$image_name.changes ]; then 
			mv $dest_dir/$image_name.changes $dest_dir/$image_name.changes~ 
		fi
	fi
fi

unzip -j -d $dest_dir $keep_file_name
#mv $pharo_name $dest_dir
mv $dest_dir/$pharo_name*.image $dest_dir/$image_name.image
mv $dest_dir/$pharo_name*.changes $dest_dir/$image_name.changes

if [ ! -z "$sources_to_remove" ]; then
	if [ -e $dest_dir/$sources_to_remove ]; then 
		rm $dest_dir/$sources_to_remove
	fi
fi

if [ -f "$dest_dir/$image_name.st" ]; then
	phconfig "$dest_dir/$image_name.image" $config_file
else
	if [ -f "$dest_dir/config.st" ]; then
		phconfig "$dest_dir/$image_name.image" config.st
	fi
fi
# open if asked
if [ $open == 1 ]; then
	if (($flat_version >= 50 )); then
		vm=pharo$arch_suffix
	else
		vm=pharo-legacy
	fi
	$vm $dest_dir/$image_name.image
fi
